name: main-push

on:
  push:
    branches:
      - test-deploy

jobs:
  publish:
    runs-on: ubuntu-latest
    name: Publish Docker Image
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: aspRun
        working-directory: ./backend/aspRun
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/nycapp:asprun -f Dockerfile.aspRun .
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push ${{ secrets.DOCKER_USERNAME }}/nycapp:asprun
      
      - name: react
        working-directory: ./frontend
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/nycapp:react -f Dockerfile.react .
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push ${{ secrets.DOCKER_USERNAME }}/nycapp:react
        
      - name: nginx
        working-directory: ./reverse-proxy
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/nycapp:nginx -f Dockerfile.nginx .
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push ${{ secrets.DOCKER_USERNAME }}/nycapp:nginx
  
  deploy:
    needs: publish
    name: Run Image on Server
    runs-on: ubuntu-latest
    steps:
      -
        name: Install SSH keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
      -
        name: Connect and pull
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.WORK_DIR }} && docker-compose pull && docker-compose up -d" || exit 1
      -
        name: Cleanup
        run: rm -f ~/.ssh/id_rsa ~/.ssh/known_hosts